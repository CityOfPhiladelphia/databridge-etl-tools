name: Build, test, and deploy docker image to ECR

on:
  push:
    branches:
      - 'master'

concurrency:
  group: testing_environment
  cancel-in-progress: false

jobs:
  build:
    name: Build and deploy docker container
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: self-hosted

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    # This is a github function? Ref doc: https://github.com/actions/checkout#checkout-a-different-branch
    # IMPORTANT NOTE: pinned to v3 instead of master, because v4 uses node20 and glibc 2.27. Amazon linux 2 atm only supports
    # glibc 2.26. Change notes: https://github.com/marketplace/actions/checkout
    - uses: actions/checkout@v3
      with:
        ref: master

  # https://github.com/marketplace/actions/microsoft-teams-deploy-card
  # Using replacement fork for toko-bifrost, context for why: https://github.com/toko-bifrost/ms-teams-deploy-card/issues/33#issuecomment-888466503 
    #- uses: toko-bifrost/ms-teams-deploy-card@master
    # Note: deprecated because of nodejs 12 and seemingly un-updated.
    # commenting out for now.
    #- uses: patrickpaulin/ms-teams-deploy-card@master
    #  if: always()
    #  with:
    #    GITHUB-TOKEN: ${{ github.token }}
    #    WEBHOOK-URI: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
    #    card-layout-start: compact
    #    show-on-start: true
    #    show-on-exit: true
    #    custom-facts: |
    #      - name: Job Progress
    #        value: Building databridge-etl-tools

    
    # https://github.com/aws-actions/amazon-ecr-login
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@master
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Prune docker system to clear space
    - name: docker system purne
      run: |
         yes | docker system prune
         
    # Build our docker container and insert our AWS secret keys
    # no-cache so we're sure we're getting all changes (such as geopetl changes)
    # NOTE: right now just build and test python 3.12 for prod deployment, but we have 3.11 and 3.13 Dockerfiles too.
    - name: Build 312 docker container
      run: |
         docker build -t dbtools-312 \
         --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
         --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
         --no-cache \
         -f Dockerfile-312 .
      env: 
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # Also build an airflow version
    - name: Build Airflow docker container
      run: |
         docker build -t dbtools-airflow \
         --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
         --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
         --no-cache \
         -f Dockerfile-airflow .
      env: 
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  


    # https://github.com/aws-actions/amazon-ecr-login
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Docker Push 312 to ECR
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        ECR_REPOSITORY_URL: ${{ secrets.ECR_REPOSITORY_URL }}
      run: |
        docker tag dbtools-312:latest $ECR_REPOSITORY_URL:latest
        docker push $ECR_REPOSITORY_URL:latest

    - name: Docker Push airflow to ECR
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        ECR_REPOSITORY_URL: ${{ secrets.ECR_REPOSITORY_URL }}
      run: |
        docker tag dbtools-airflow:latest $ECR_REPOSITORY_URL:latest
        docker push $ECR_REPOSITORY_URL:airflow-latest
